-- Configuration variables
_G.HeadSize = 15
_G.Transparency = 0.5
_G.Disabled = true
_G.TeamCheck = true

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

-- Enhanced Hitbox logic with long-distance support
local function updatePlayerHitbox(player)
    if not player.Character then return end
    
    local head = player.Character:FindFirstChild("Head")
    local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
    
    if head and humanoidRootPart then
        -- Store original properties if not stored
        if not head:GetAttribute("OriginalSize") then
            head:SetAttribute("OriginalSize", tostring(head.Size))
            head:SetAttribute("OriginalTransparency", head.Transparency)
        end
        
        -- Apply hitbox modifications
        head.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
        head.Transparency = _G.Transparency
        head.BrickColor = BrickColor.new("Really red")
        head.Material = Enum.Material.Neon
        head.CanCollide = false
        head.Massless = true
        head.Color = Color3.fromRGB(255, 0, 0)
        
        -- Force network ownership for better long-distance performance
        if head.AssemblyLinearVelocity then
            head.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end
        
        -- Add or update Selection Box for better visibility at distance
        local selectionBox = head:FindFirstChild("HitboxHighlight")
        if not selectionBox then
            selectionBox = Instance.new("SelectionBox")
            selectionBox.Name = "HitboxHighlight"
            selectionBox.Adornee = head
            selectionBox.Parent = head
        end
        selectionBox.Color3 = Color3.fromRGB(255, 0, 0)
        selectionBox.LineThickness = 0.2
        selectionBox.Transparency = 0.3
        
        -- Add highlight for even better visibility
        local highlight = head:FindFirstChild("DistanceHighlight")
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Name = "DistanceHighlight"
            highlight.Parent = head
        end
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
        highlight.FillTransparency = 0.7
        highlight.OutlineTransparency = 0.2
        highlight.Adornee = head
        
        -- Ensure part stays loaded at distance
        head.TopSurface = Enum.SurfaceType.Smooth
        head.BottomSurface = Enum.SurfaceType.Smooth
    end
end

-- More aggressive update system for long distances
local lastUpdate = 0
local updateInterval = 0.1 -- Update every 0.1 seconds instead of every frame

RunService.Heartbeat:Connect(function()
    if not _G.Disabled then return end
    
    local currentTime = tick()
    if currentTime - lastUpdate < updateInterval then return end
    lastUpdate = currentTime
    
    local localPlayer = Players.LocalPlayer
    if not localPlayer.Character then return end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and (not _G.TeamCheck or player.Team ~= localPlayer.Team) then
            pcall(function()
                updatePlayerHitbox(player)
            end)
        end
    end
end)

-- Additional system for handling new players and respawns
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        wait(1) -- Wait for character to fully load
        if _G.Disabled then
            pcall(function()
                updatePlayerHitbox(player)
            end)
        end
    end)
end)

-- Handle existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        if player.Character then
            pcall(function()
                updatePlayerHitbox(player)
            end)
        end
        player.CharacterAdded:Connect(function()
            wait(1)
            if _G.Disabled then
                pcall(function()
                    updatePlayerHitbox(player)
                end)
            end
        end)
    end
end

-- GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HitboxGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

-- Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 340, 0, 320)
frame.Position = UDim2.new(0, 20, 0, 100)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Parent = screenGui
frame.Visible = true
frame.ClipsDescendants = true

-- Add rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = frame

-- Title Bar (draggable area)
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 35)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
titleBar.BorderSizePixel = 0
titleBar.Parent = frame

-- Title bar corners
local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

-- Title text
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -70, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Long-Range Hitbox"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 16
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 30, 0, 25)
minimizeButton.Position = UDim2.new(1, -65, 0, 5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
minimizeButton.Text = "−"
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.TextSize = 18
minimizeButton.BorderSizePixel = 0
minimizeButton.Parent = titleBar

local minCorner = Instance.new("UICorner")
minCorner.CornerRadius = UDim.new(0, 4)
minCorner.Parent = minimizeButton

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 25)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
closeButton.Text = "×"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 18
closeButton.BorderSizePixel = 0
closeButton.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 4)
closeCorner.Parent = closeButton

-- Content Frame
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, 0, 1, -35)
contentFrame.Position = UDim2.new(0, 0, 0, 35)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = frame

-- Toggle GUI visibility with keyboard
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.RightShift then
        frame.Visible = not frame.Visible
    end
end)

-- Mobile toggle button (always visible)
local mobileToggle = Instance.new("TextButton")
mobileToggle.Size = UDim2.new(0, 50, 0, 50)
mobileToggle.Position = UDim2.new(1, -60, 0, 10)
mobileToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
mobileToggle.Text = "H"
mobileToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
mobileToggle.Font = Enum.Font.SourceSansBold
mobileToggle.TextSize = 20
mobileToggle.BorderSizePixel = 0
mobileToggle.Parent = screenGui

local mobileCorner = Instance.new("UICorner")
mobileCorner.CornerRadius = UDim.new(0, 25)
mobileCorner.Parent = mobileToggle

-- Head Size Input
local sizeLabel = Instance.new("TextLabel")
sizeLabel.Position = UDim2.new(0, 10, 0, 10)
sizeLabel.Size = UDim2.new(1, -20, 0, 20)
sizeLabel.Text = "Head Size:"
sizeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
sizeLabel.BackgroundTransparency = 1
sizeLabel.Font = Enum.Font.SourceSans
sizeLabel.TextSize = 16
sizeLabel.TextXAlignment = Enum.TextXAlignment.Left
sizeLabel.Parent = contentFrame

local sizeInput = Instance.new("TextBox")
sizeInput.Position = UDim2.new(0, 10, 0, 35)
sizeInput.Size = UDim2.new(1, -20, 0, 30)
sizeInput.PlaceholderText = "Enter size (e.g. 15)"
sizeInput.Text = tostring(_G.HeadSize)
sizeInput.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
sizeInput.TextColor3 = Color3.fromRGB(255, 255, 255)
sizeInput.Font = Enum.Font.SourceSans
sizeInput.TextSize = 16
sizeInput.ClearTextOnFocus = false
sizeInput.BorderSizePixel = 0
sizeInput.Parent = contentFrame

local sizeCorner = Instance.new("UICorner")
sizeCorner.CornerRadius = UDim.new(0, 4)
sizeCorner.Parent = sizeInput

-- Transparency Input
local transparencyLabel = Instance.new("TextLabel")
transparencyLabel.Position = UDim2.new(0, 10, 0, 75)
transparencyLabel.Size = UDim2.new(1, -20, 0, 20)
transparencyLabel.Text = "Transparency:"
transparencyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
transparencyLabel.BackgroundTransparency = 1
transparencyLabel.Font = Enum.Font.SourceSans
transparencyLabel.TextSize = 16
transparencyLabel.TextXAlignment = Enum.TextXAlignment.Left
transparencyLabel.Parent = contentFrame

local transparencyInput = Instance.new("TextBox")
transparencyInput.Position = UDim2.new(0, 10, 0, 100)
transparencyInput.Size = UDim2.new(1, -20, 0, 30)
transparencyInput.PlaceholderText = "Enter transparency (0.0 - 1.0)"
transparencyInput.Text = tostring(_G.Transparency)
transparencyInput.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
transparencyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
transparencyInput.Font = Enum.Font.SourceSans
transparencyInput.TextSize = 16
transparencyInput.ClearTextOnFocus = false
transparencyInput.BorderSizePixel = 0
transparencyInput.Parent = contentFrame

local transCorner = Instance.new("UICorner")
transCorner.CornerRadius = UDim.new(0, 4)
transCorner.Parent = transparencyInput

-- TeamCheck Toggle
local teamCheckButton = Instance.new("TextButton")
teamCheckButton.Position = UDim2.new(0, 10, 0, 140)
teamCheckButton.Size = UDim2.new(1, -20, 0, 35)
teamCheckButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
teamCheckButton.TextColor3 = Color3.fromRGB(255, 255, 255)
teamCheckButton.Font = Enum.Font.SourceSans
teamCheckButton.TextSize = 16
teamCheckButton.Text = "TeamCheck: ON"
teamCheckButton.BorderSizePixel = 0
teamCheckButton.Parent = contentFrame

local teamCorner = Instance.new("UICorner")
teamCorner.CornerRadius = UDim.new(0, 4)
teamCorner.Parent = teamCheckButton

-- Enable/Disable Toggle
local enableButton = Instance.new("TextButton")
enableButton.Position = UDim2.new(0, 10, 0, 185)
enableButton.Size = UDim2.new(1, -20, 0, 35)
enableButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
enableButton.TextColor3 = Color3.fromRGB(255, 255, 255)
enableButton.Font = Enum.Font.SourceSansBold
enableButton.TextSize = 16
enableButton.Text = "ENABLED"
enableButton.BorderSizePixel = 0
enableButton.Parent = contentFrame

local enableCorner = Instance.new("UICorner")
enableCorner.CornerRadius = UDim.new(0, 4)
enableCorner.Parent = enableButton

-- Force Update Button (for long distances)
local forceUpdateButton = Instance.new("TextButton")
forceUpdateButton.Position = UDim2.new(0, 10, 0, 230)
forceUpdateButton.Size = UDim2.new(1, -20, 0, 35)
forceUpdateButton.BackgroundColor3 = Color3.fromRGB(100, 100, 200)
forceUpdateButton.TextColor3 = Color3.fromRGB(255, 255, 255)
forceUpdateButton.Font = Enum.Font.SourceSans
forceUpdateButton.TextSize = 16
forceUpdateButton.Text = "FORCE REFRESH"
forceUpdateButton.BorderSizePixel = 0
forceUpdateButton.Parent = contentFrame

local forceCorner = Instance.new("UICorner")
forceCorner.CornerRadius = UDim.new(0, 4)
forceCorner.Parent = forceUpdateButton

-- Drag functionality
local dragging = false
local dragStart = nil
local startPos = nil

local function updateInput(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        if dragging then
            updateInput(input)
        end
    end
end)

-- Minimize functionality
local isMinimized = false
local originalSize = frame.Size

minimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    
    if isMinimized then
        local tween = TweenService:Create(frame, tweenInfo, {Size = UDim2.new(0, 340, 0, 35)})
        tween:Play()
        minimizeButton.Text = "□"
    else
        local tween = TweenService:Create(frame, tweenInfo, {Size = originalSize})
        tween:Play()
        minimizeButton.Text = "−"
    end
end)

-- Close functionality
closeButton.MouseButton1Click:Connect(function()
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
    local tween = TweenService:Create(frame, tweenInfo, {
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(frame.Position.X.Scale, frame.Position.X.Offset + frame.Size.X.Offset/2, frame.Position.Y.Scale, frame.Position.Y.Offset + frame.Size.Y.Offset/2)
    })
    tween:Play()
    tween.Completed:Connect(function()
        frame.Visible = false
        -- Reset size and position for next time
        frame.Size = originalSize
        frame.Position = UDim2.new(0, 20, 0, 100)
    end)
end)

-- Mobile toggle functionality
mobileToggle.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
    if frame.Visible and isMinimized then
        -- If opening minimized window, expand it
        isMinimized = false
        frame.Size = originalSize
        minimizeButton.Text = "−"
    end
end)

-- Button interactions
teamCheckButton.MouseButton1Click:Connect(function()
    _G.TeamCheck = not _G.TeamCheck
    teamCheckButton.Text = "TeamCheck: " .. (_G.TeamCheck and "ON" or "OFF")
    teamCheckButton.BackgroundColor3 = _G.TeamCheck and Color3.fromRGB(70, 70, 70) or Color3.fromRGB(120, 50, 50)
end)

enableButton.MouseButton1Click:Connect(function()
    _G.Disabled = not _G.Disabled
    enableButton.Text = _G.Disabled and "ENABLED" or "DISABLED"
    enableButton.BackgroundColor3 = _G.Disabled and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
end)

forceUpdateButton.MouseButton1Click:Connect(function()
    -- Force update all players for long-distance issues
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and (not _G.TeamCheck or player.Team ~= LocalPlayer.Team) then
            pcall(function()
                updatePlayerHitbox(player)
            end)
        end
    end
    
    -- Visual feedback
    forceUpdateButton.Text = "REFRESHED!"
    wait(0.5)
    forceUpdateButton.Text = "FORCE REFRESH"
end)

-- Input handlers
sizeInput.FocusLost:Connect(function(enterPressed)
    local input = tonumber(sizeInput.Text)
    if input and input > 0 and input <= 100 then
        _G.HeadSize = input
    else
        sizeInput.Text = tostring(_G.HeadSize)
    end
end)

transparencyInput.FocusLost:Connect(function(enterPressed)
    local input = tonumber(transparencyInput.Text)
    if input and input >= 0 and input <= 1 then
        _G.Transparency = input
    else
        transparencyInput.Text = tostring(_G.Transparency)
    end
end)

-- Touch-friendly button effects
local function addButtonEffect(button)
    button.MouseEnter:Connect(function()
        if not UserInputService.TouchEnabled then
            local tween = TweenService:Create(button, TweenInfo.new(0.1), {BackgroundTransparency = 0.3})
            tween:Play()
        end
    end)
    
    button.MouseLeave:Connect(function()
        if not UserInputService.TouchEnabled then
            local tween = TweenService:Create(button, TweenInfo.new(0.1), {BackgroundTransparency = 0})
            tween:Play()
        end
    end)
    
    button.MouseButton1Down:Connect(function()
        local tween = TweenService:Create(button, TweenInfo.new(0.05), {Size = button.Size - UDim2.new(0, 2, 0, 2)})
        tween:Play()
    end)
    
    button.MouseButton1Up:Connect(function()
        local tween = TweenService:Create(button, TweenInfo.new(0.05), {Size = button.Size + UDim2.new(0, 2, 0, 2)})
        tween:Play()
    end)
end

-- Apply effects to all buttons
addButtonEffect(minimizeButton)
addButtonEffect(closeButton)
addButtonEffect(teamCheckButton)
addButtonEffect(enableButton)
addButtonEffect(forceUpdateButton)
addButtonEffect(mobileToggle)